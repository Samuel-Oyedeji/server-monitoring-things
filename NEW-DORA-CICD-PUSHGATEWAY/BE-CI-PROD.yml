name: Prod CI Pipeline

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: techiesmatch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Push DORA Metrics to Pushgateway (from pip install)
        env:
          PUSHGATEWAY_URL: http://18.171.107.108:9091 
          JOB_NAME: CI_BE_PROD
          ENV: PROD
          SERVICE: BE
          TYPE: CI
        run: |
          START_TIME=$(date +%s)

          # >>>>> Actual Job Starts >>>>>
          (

          echo "Installing dependencies..."
          pip install -r requirements.txt

          echo "Generating dynamic port..."
          FREE_PORT=$(python -c '
          import socket
          for port in range(8000, 9000):
              try:
                  s = socket.socket()
                  s.bind(("", port))
                  s.close()
                  print(port)
                  break
              except:
                  pass
          ')
          export PORT=$FREE_PORT
          echo "Using port: $PORT"

          
          echo "Copying and modifying .env file..."
          cp .env-test .env
          if grep -q "PORT=" .env; then
            sed -i "s/PORT=.*/PORT=$PORT/" .env
          else
            echo "PORT=$PORT" >> .env
          fi

          echo "Contents of .env file:"
          cat .env
          
          echo "Cleaning up previous processes..."
          pkill -f "python3 main.py" || true
          sleep 5

          echo "Starting app on port $PORT..."
          PORT=$PORT python3 main.py &
          pid=$!
          sleep 5

          if ps -p $pid > /dev/null; then
            echo "main.py started successfully on port $PORT"
            kill $pid
          else
            echo "main.py failed to start on port $PORT"
            cat app.log || true
            exit 1
          fi

          echo "Running tests..."
          PORT=$PORT PYTHONPATH=. pytest

          )
          # <<<<< Actual Job Ends <<<<<

          JOB_EXIT_CODE=$?
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          if [ $JOB_EXIT_CODE -eq 0 ]; then
            echo "Job succeeded, pushing deployment metric..."
            echo "github_actions_deployments_total{env=\"$ENV\",service=\"$SERVICE\",type=\"$TYPE\"} 1" | \
              curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/$JOB_NAME
          else
            echo "Job failed, pushing failure metric..."
            echo "github_failed_deployments_total{env=\"$ENV\",service=\"$SERVICE\",type=\"$TYPE\"} 1" | \
              curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/$JOB_NAME
          fi

          echo "Pushing commit-to-deploy duration metric..."
          echo "github_commit_to_deploy_seconds{env=\"$ENV\",service=\"$SERVICE\",type=\"$TYPE\"} ${DURATION}" | \
            curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/$JOB_NAME

          # echo "Pushing MTTR metric..."
            echo "github_incident_recovery_seconds{env=\"$ENV\",service=\"$SERVICE\",type=\"$TYPE\"} ${DURATION}" | \
             curl --data-binary @- $PUSHGATEWAY_URL/metrics/job/$JOB_NAME

          exit $JOB_EXIT_CODE